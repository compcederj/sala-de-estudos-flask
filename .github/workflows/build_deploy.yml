name: PythonSalaDeEstudos

on:
  push:
    branches: [ main ]
    paths-ignore:
    - 'docs/**'
    - 'scripts/**'

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-18.04

    # Github Action Workflow
    steps:
      - name: Check out code
        uses: actions/checkout@v2

    # Deploy
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          imageName: thcborges/sala-de-estudos-flask
          push: true
          tags: ${{ secrets.CONTAINER_REGISTRY_NAME }}:${{ github.sha }},${{ secrets.CONTAINER_REGISTRY_NAME }}:latest
      
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
      
      - name: Add public IP to AWS security group
        uses: sohelamin/aws-security-group-add-ip-action@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEPLOY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEPLOY }}
          aws-region: 'us-east-1'
          aws-security-group-id: ${{ secrets.AWS_SECURITY_GROUP_ID_DEPLOY }}
          port: '22'
          description: 'GitHub Action'
      
      - name: Copy file via SSH key
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          port: ${{ secrets.AWS_EC2_PORT }}
          source: "${{ secrets.CONTAINER_REGISTRY_NAME }}-docker-stack.yml"
          target: "~/deploy/${{ secrets.CONTAINER_REGISTRY_NAME }}"
          overwrite: true

      - name: 'Deploy to AWS EC2'
        uses: appleboy/ssh-action@master
        env:
          CONTAINER_REGISTRY_NAME: ${{ secrets.CONTAINER_REGISTRY_NAME }}
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          port: ${{ secrets.AWS_EC2_PORT }}
          envs: CONTAINER_REGISTRY_NAME
          script: |
            echo "# VERSION $CONTAINER_REGISTRY_NAME:${{ github.sha }}
            
            FLASK_APP=saladeestudos/app.py
            FLASK_ENV=production
            SQL_HOST=db
            SQL_PORT=5432
            DATABASE=postgres
            
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            SQLALCHEMY_DATABASE_URI=${{ secrets.SQLALCHEMY_DATABASE_URI }}

            " > ~/deploy/${{ secrets.CONTAINER_REGISTRY_NAME }}.env

            cd ~/deploy/${{ secrets.CONTAINER_REGISTRY_NAME }}
            
            sed -i "s/GITHUB_HASH_TAG/${{ github.sha }}/g" ${{ secrets.CONTAINER_REGISTRY_NAME }}-docker-stack.yml
            sed -i "s/PSQL_PWD/${{ secrets.POSTGRES_PASSWORD }}/g" ${{ secrets.CONTAINER_REGISTRY_NAME }}-docker-stack.yml
            sed -i "s/PSQL_USER/${{ secrets.POSTGRES_USER }}/g" ${{ secrets.CONTAINER_REGISTRY_NAME }}-docker-stack.yml
            sed -i "s/PSQL_DB/${{ secrets.POSTGRES_DB }}/g" ${{ secrets.CONTAINER_REGISTRY_NAME }}-docker-stack.yml
            
            docker stack deploy --compose-file=${HOME}/deploy/${{ secrets.CONTAINER_REGISTRY_NAME }}/${{ secrets.CONTAINER_REGISTRY_NAME }}-docker-stack.yml ${{ secrets.CONTAINER_REGISTRY_NAME }} --with-registry-auth

